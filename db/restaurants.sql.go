// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: restaurants.sql

package db

import (
	"context"
)

const createRestaurant = `-- name: CreateRestaurant :one
insert into restaurants (
  name, location
) values (
  $1, GeomFromEWKB($2)
)
returning id
`

type CreateRestaurantParams struct {
	Name     string
	Location interface{}
}

func (q *Queries) CreateRestaurant(ctx context.Context, arg CreateRestaurantParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, createRestaurant, arg.Name, arg.Location)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const listRestaurants = `-- name: ListRestaurants :many
select
  id,
  name,
  GeomFromEWKB(location) as location
from restaurants
order by name
`

type ListRestaurantsRow struct {
	ID       int64
	Name     string
	Location interface{}
}

func (q *Queries) ListRestaurants(ctx context.Context) ([]ListRestaurantsRow, error) {
	rows, err := q.db.QueryContext(ctx, listRestaurants)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListRestaurantsRow
	for rows.Next() {
		var i ListRestaurantsRow
		if err := rows.Scan(&i.ID, &i.Name, &i.Location); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listRestaurantsNearby = `-- name: ListRestaurantsNearby :many
select
  id,
  name,
  GeomFromEWKB(location) as location
from restaurants
where
  ST_Distance(location, GeomFromEWKB($1)::geometry, false) < $2::int
order by id asc
`

type ListRestaurantsNearbyParams struct {
	Origin      interface{}
	MaxDistance int32
}

type ListRestaurantsNearbyRow struct {
	ID       int64
	Name     string
	Location interface{}
}

func (q *Queries) ListRestaurantsNearby(ctx context.Context, arg ListRestaurantsNearbyParams) ([]ListRestaurantsNearbyRow, error) {
	rows, err := q.db.QueryContext(ctx, listRestaurantsNearby, arg.Origin, arg.MaxDistance)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListRestaurantsNearbyRow
	for rows.Next() {
		var i ListRestaurantsNearbyRow
		if err := rows.Scan(&i.ID, &i.Name, &i.Location); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
